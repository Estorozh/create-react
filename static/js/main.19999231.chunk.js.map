{"version":3,"sources":["components/form.component.jsx","components/weather.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Form","props","className","error","role","onSubmit","loadWeather","type","name","autoComplete","defaultValue","Weather","console","log","city","country","weatherIcon","temp_celsius","min","max","minmaxTemp","temp_min","temp_max","descript","App","getWeather","e","a","preventDefault","target","elements","value","fetch","api_call","json","resp","cod","setState","sys","celsius","calcCelsius","main","temp","weather","getWeatherIcon","id","state","icon","bind","Thunderstorm","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","Math","floor","icons","rangeID","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.19999231.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./form.style.css\";\n\nconst Form = props => {\n    return (\n        <div className=\"container\">\n            <div>{props.error ? error() : null}</div>\n            <form onSubmit={props.loadWeather}>\n                <div className=\"row justify-content-center\">\n                    <div className=\"col-md3 offset-md-2\">\n                        <input type=\"text\" name=\"city\" autoComplete=\"off\" className=\"form-control\" defaultValue=\"Saint Petersburg\"/>\n                    </div>\n                    <div className=\"col-md3 pl-sm-4\">\n                        <input type=\"text\" name=\"country\" autoComplete=\"off\" className=\"form-control\" defaultValue=\"RU\"/>\n                    </div>\n                    <div className=\"col-md3 col-md-0 text-md-left pl-sm-4\">\n                        <button className=\"btn btn-warning mt-sm-0\">Get Weather</button>\n                    </div>\n                </div>\n            </form>\n        </div>\n    )\n}\n\nfunction error() {\n    return (\n        <div className=\"alert alert-danger mx-5\" role=\"alert\">\n            City or country not found\n        </div>\n    )\n}\n\nexport default Form;","import React from 'react';\n\nconst Weather = (props) => {\n    return (\n        <div className=\"container\">\n            {console.log(props)}\n            <div className=\"cards\">\n                {props.city ?\n                    <h1>{props.city}, {props.country}</h1> :\n                    null\n                }\n                <h5 className=\"py-4\">\n                    <i className={`wi ${props.weatherIcon} display-1`}></i>\n                </h5>\n                {props.temp_celsius? (\n                        <h1 className=\"py-2\">{props.temp_celsius}&deg;</h1>) : null}\n                {minmaxTemp(props.temp_min,props.temp_max)}\n\n                <h4 className=\"py-3\">\n                    {props.descript}\n                </h4>\n            </div>\n        </div>\n    )\n\n    function minmaxTemp(min, max) {\n        if(min && max) {\n            return (\n                <h3><span className=\"px-4\">{min}&deg;</span><span className=\"px-4\">{max}&deg;</span></h3>\n            );\n        }\n    }\n}\n\nexport default Weather;","import React from 'react';\nimport './App.css';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"weather-icons/css/weather-icons.css\"\nimport Form from \"./components/form.component.jsx\";\nimport Weather from './components/weather.component.jsx';\n\nconst API = '1c406369b4e0eab651cf1c25759d3e0b';\n\nclass App extends React.Component\n{\n  constructor() {\n    super();\n    this.state = {\n      city: null,\n      country: null,\n      icon: null,\n      main: null,\n      celsius: null,\n      temp_max: null,\n      temp_min: null,\n      descript: ' ',\n      error: false\n    };\n\n    this.getWeather = this.getWeather.bind(this);\n\n    this.weatherIcon = {\n      Thunderstorm: \"wi-thunderstorm\",\n      Drizzle: \"wi-sleet\",\n      Rain: \"wi-storm-showers\",\n      Snow: \"wi-snow\",\n      Atmosphere: \"wi-fog\",\n      Clear: \"wi-day-sunny\",\n      Clouds: \"wi-day-fog\"\n    };\n  }\n\n  calcCelsius(temp) {\n    let cel = Math.floor(temp - 273.15);\n    return cel;\n  }\n\n  getWeatherIcon(icons, rangeID) {\n    switch(true) {\n      case rangeID >= 200 && rangeID <= 232: this.setState({icon: this.weatherIcon.Thunderstorm}); break;\n      case rangeID >= 300 && rangeID <= 321: this.setState({icon: this.weatherIcon.Drizzle}); break;\n      case rangeID >= 500 && rangeID <= 531: this.setState({icon: this.weatherIcon.Rain}); break;\n      case rangeID >= 600 && rangeID <= 622: this.setState({icon: this.weatherIcon.Snow}); break;\n      case rangeID >= 700 && rangeID <= 781: this.setState({icon: this.weatherIcon.Atmosphere}); break;\n      case rangeID === 800: this.setState({icon: this.weatherIcon.Clear}); break;\n      case rangeID >= 801 && rangeID <= 804: this.setState({icon: this.weatherIcon.Clouds}); break;\n      default: this.setState({icon: this.weatherIcon.Drizzle}); break;\n    }\n  }\n  \n  getWeather = async (e) => {\n    e.preventDefault();\n\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n\n    if(city && country) {\n      const api_call = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API}`);\n\n      const resp = await api_call.json();\n\n      console.log(resp);\n      if(resp.cod==\"404\") {\n        return this.setState({error: true});\n      }\n      this.setState({\n        city: resp.name,\n        country: resp.sys.country,\n        celsius: this.calcCelsius(resp.main.temp),\n        temp_max: this.calcCelsius(resp.main.temp_max),\n        temp_min: this.calcCelsius(resp.main.temp_min),\n        descript: resp.weather[0].descript,\n      })\n\n      this.getWeatherIcon(this.weatherIcon, resp.weather[0].id);\n    } else {\n      this.setState({error: true})\n    }\n\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Form loadWeather={this.getWeather} error={this.state.error}/>\n        <Weather \n          city={this.state.city}\n          country={this.state.country} \n          temp_celsius={this.state.celsius} \n          temp_max={this.state.temp_max}\n          temp_min={this.state.temp_min}\n          descript={this.state.descript}\n          weatherIcon={this.state.icon}\n          />\n      </div>\n    );  \n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}