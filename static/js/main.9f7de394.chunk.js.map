{"version":3,"sources":["components/weather.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Weather","props","className","city","country","weatherIcon","temp_celsius","min","temp_min","max","temp_max","descript","App","getWeather","a","fetch","api_call","json","resp","console","log","setState","name","celsius","calcCelsius","main","temp","weather","getWeatherIcon","id","state","icon","error","Thunderstorm","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","Math","floor","icons","rangeID","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.9f7de394.chunk.js","sourcesContent":["import React from 'react';\n\nconst Weather = (props) => {\n    return (\n        <div className=\"container\">\n            <div className=\"cards\">\n                <h1>{props.city}, {props.country}</h1>\n                <h5 className=\"py-4\">\n                    <i className={`wi ${props.weatherIcon} display-1`}></i>\n                </h5>\n                <h1 className=\"py-2\">{props.temp_celsius}&deg;</h1>\n                {minmaxTemp(props.temp_min,props.temp_max)}\n\n                <h4 className=\"py-3\">\n                    {props.descript}\n                </h4>\n            </div>\n        </div>\n    )\n\n    function minmaxTemp(min, max) {\n        return (\n        <h3><span className=\"px-4\">{min}&deg;</span><span className=\"px-4\">{max}&deg;</span></h3>\n        )\n    }\n}\n\nexport default Weather;","import React from 'react';\nimport './App.css';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"weather-icons/css/weather-icons.css\"\nimport Weather from './components/weather.component.jsx';\n\nconst API = '1c406369b4e0eab651cf1c25759d3e0b';\n\nclass App extends React.Component\n{\n  constructor() {\n    super();\n    this.state = {\n      city: null,\n      country: null,\n      icon: null,\n      main: null,\n      celsius: null,\n      temp_max: null,\n      temp_min: null,\n      descript: '',\n      error: false\n    };\n    this.getWeather();\n\n    this.weatherIcon = {\n      Thunderstorm: \"wi-thunderstorm\",\n      Drizzle: \"wi-sleet\",\n      Rain: \"wi-storm-showers\",\n      Snow: \"wi-snow\",\n      Atmosphere: \"wi-fog\",\n      Clear: \"wi-day-sunny\",\n      Clouds: \"wi-day-fog\"\n    };\n  }\n\n  calcCelsius(temp) {\n    let cel = Math.floor(temp - 273.15);\n    return cel;\n  }\n\n  getWeatherIcon(icons, rangeID) {\n    switch(true) {\n      case rangeID >= 200 && rangeID <= 232: this.setState({icon: this.weatherIcon.Thunderstorm}); break;\n      case rangeID >= 300 && rangeID <= 321: this.setState({icon: this.weatherIcon.Drizzle}); break;\n      case rangeID >= 500 && rangeID <= 531: this.setState({icon: this.weatherIcon.Rain}); break;\n      case rangeID >= 600 && rangeID <= 622: this.setState({icon: this.weatherIcon.Snow}); break;\n      case rangeID >= 700 && rangeID <= 781: this.setState({icon: this.weatherIcon.Atmosphere}); break;\n      case rangeID == 800: this.setState({icon: this.weatherIcon.Clear}); break;\n      case rangeID >= 801 && rangeID <= 804: this.setState({icon: this.weatherIcon.Clouds}); break;\n    }\n  }\n  \n  getWeather = async () => {\n    const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=London,uk&appid=${API}`);\n\n    const resp = await api_call.json();\n\n    console.log(resp);\n    this.setState({\n      city: resp.name,\n      country: resp.country,\n      celsius: this.calcCelsius(resp.main.temp),\n      temp_max: this.calcCelsius(resp.main.temp_max),\n      temp_min: this.calcCelsius(resp.main.temp_min),\n      descript: resp.weather[0].descript,\n    })\n\n    this.getWeatherIcon(this.weatherIcon, resp.weather[0].id);\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Weather \n          city={this.state.city} \n          country={this.state.country} \n          temp_celsius={this.state.celsius} \n          temp_max={this.state.temp_max}\n          temp_min={this.state.temp_min}\n          descript={this.state.descript}\n          weatherIcon={this.state.icon}\n          />\n      </div>\n    );  \n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}